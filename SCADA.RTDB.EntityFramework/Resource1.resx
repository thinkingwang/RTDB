<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CVariableGroup_AddGroup_GroupNameIsNull" xml:space="preserve">
    <value>添加组的名称不为空</value>
  </data>
  <data name="CVariableGroup_AddGroup_GroupeNameIsExist" xml:space="preserve">
    <value>组名称已存在，不能重复加载</value>
  </data>
  <data name="VariableGroup_IsExistGroupName_parentGroup_is_null" xml:space="preserve">
    <value>父祖为空</value>
  </data>
  <data name="VariableGroup_ReplaceGroupName_editGroup_is_null" xml:space="preserve">
    <value>需要修改组名称的组为空</value>
  </data>
  <data name="VariableBase_AddVar_analogElement_is_null" xml:space="preserve">
    <value>analogElement is null</value>
  </data>
  <data name="VariableBase_AddVar_digitalElement_is_null" xml:space="preserve">
    <value>digitalElement is null</value>
  </data>
  <data name="VariableBase_AddVar_stringElement_is_null" xml:space="preserve">
    <value>stringElement is null</value>
  </data>
  <data name="VariableGroup_ReGroupName_groupName_Is_Null" xml:space="preserve">
    <value>需要修改的变量组新名称为空</value>
  </data>
  <data name="VariableGroup_addVariable_variableName_is_Exist" xml:space="preserve">
    <value>当前组已存在相同变量名的变量</value>
  </data>
  <data name="VariableBase_EditVar_varObj_is_null" xml:space="preserve">
    <value>varObj is null</value>
  </data>
  <data name="VariableGroup_AddVariable_variable_is_null" xml:space="preserve">
    <value>添加到组的变量为空</value>
  </data>
  <data name="VariableGroup_RemoveGroup_DeleteGroup_Is_RootGroup" xml:space="preserve">
    <value>删除组为根组，不能删除</value>
  </data>
  <data name="VariableRepository_AddVar_VariableIsNull" xml:space="preserve">
    <value>添加变量为空</value>
  </data>
  <data name="VariableRepository_AddVar_VariableIsExist" xml:space="preserve">
    <value>该变量已经存在</value>
  </data>
  <data name="UnitofWork_AddGroup_currentVariableGroup" xml:space="preserve">
    <value>未检索到组节点</value>
  </data>
  <data name="VariableUnitOfWork_AddGroupMethod_currentNodeIsNull" xml:space="preserve">
    <value>当前组节点为空</value>
  </data>
  <data name="VariableUnitOfWork_VariableUnitOfWork_variableContextIsNull" xml:space="preserve">
    <value>变量上下文为空</value>
  </data>
  <data name="VariableUnitOfWork_AddGroup_parentVariableGroupIdIsNullOrEmpty" xml:space="preserve">
    <value>父节点字符串为空或不存在</value>
  </data>
  <data name="VariableUnitOfWork_RemoveGroup_curVariableGroupIdIsNullOrEmpty" xml:space="preserve">
    <value>删除组为根组节点或不存在
</value>
  </data>
  <data name="VariableUnitOfWork_IsExistName_nameIsNullOrEmpty" xml:space="preserve">
    <value>名字为空或不存在</value>
  </data>
  <data name="VariableUnitOfWork_EditVariable_AvarialeNameExist" xml:space="preserve">
    <value>变量名称重复，不能修改</value>
  </data>
  <data name="VariableRepository_PasteVariable_desGroup" xml:space="preserve">
    <value>粘贴位置未找到或不存在</value>
  </data>
  <data name="VariableRepository_PasteVariable_sourceVariable" xml:space="preserve">
    <value>粘贴板为空</value>
  </data>
  <data name="VariableRepository_PasteGroup_SourceGroupContainDesGroup" xml:space="preserve">
    <value>目标组是源组的子组</value>
  </data>
  <data name="VariableRepository_CopyGroup_destinationIsNotExist" xml:space="preserve">
    <value>目标组不存在</value>
  </data>
  <data name="AlarmRepository_AddAlarm_alarm" xml:space="preserve">
    <value>变量报警为空</value>
  </data>
</root>